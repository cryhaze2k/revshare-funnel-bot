# handlers/admin.py
import asyncio
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

import db
from config import ADMIN_IDS
import keyboards as kb

router = Router()

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º ---
class AdminFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
class AdminStates(StatesGroup):
    set_link_country = State()
    set_link_url = State()
    broadcast_message = State()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ ---

@router.message(Command("admin"), AdminFilter())
async def cmd_admin_panel(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    """
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.get_admin_keyboard())

@router.callback_query(F.data == "admin_stats", AdminFilter())
async def show_stats(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    stats = db.get_stats()
    
    users_by_country_str = "\n".join([f"  - {country}: {count}" for country, count in stats['users_by_country']])
    clicks_by_country_str = "\n".join([f"  - {country}: {count}" for country, count in stats['clicks_by_country']])
    
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**\n\n"
        f"üë§ **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats['total_users']}\n\n"
        f"üåç **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:**\n{users_by_country_str or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
        f"üñ±Ô∏è **–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º:** {stats['total_clicks']}\n\n"
        f"üìà **–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:**\n{clicks_by_country_str or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
    )
    await callback.message.answer(stats_text, parse_mode="Markdown")
    await callback.answer()

# --- –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ ---

@router.callback_query(F.data == "admin_set_link", AdminFilter())
async def set_link_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, CA, ES, DEFAULT):")
    await state.set_state(AdminStates.set_link_country)
    await callback.answer()

@router.message(AdminStates.set_link_country, AdminFilter())
async def set_link_country(message: Message, state: FSMContext):
    country_code = message.text.upper()
    await state.update_data(country_code=country_code)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è {country_code}:")
    await state.set_state(AdminStates.set_link_url)

@router.message(AdminStates.set_link_url, AdminFilter())
async def set_link_url(message: Message, state: FSMContext):
    new_url = message.text
    data = await state.get_data()
    country_code = data['country_code']
    
    if db.update_affiliate_link(country_code, new_url):
        await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_code} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ {country_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CA, ES –∏–ª–∏ DEFAULT.")
    
    await state.clear()

# --- –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---

@router.callback_query(F.data == "admin_broadcast", AdminFilter())
async def broadcast_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(AdminStates.broadcast_message)
    await callback.answer()

@router.message(AdminStates.broadcast_message, AdminFilter())
async def process_broadcast(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    user_ids = db.get_all_user_ids()
    
    success_count = 0
    error_count = 0
    
    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for user_id in user_ids:
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ñ–æ—Ç–æ –∏ —Ç.–¥.
            await bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
            success_count += 1
        except TelegramBadRequest as e:
            if "bot was blocked by the user" in e.message:
                db.set_user_inactive(user_id) # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                error_count += 1
            else:
                error_count += 1
        except Exception:
            error_count += 1
        await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–û—à–∏–±–æ–∫ (–≤–∫–ª—é—á–∞—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö): {error_count}"
    )